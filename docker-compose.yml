version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      target: production
    container_name: cruise-assessment-app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://assessment:assessment_pass@db:5432/assessment_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=INFO
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./output:/app/output
      - ./models:/app/models
    networks:
      - assessment-network
    restart: unless-stopped

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: cruise-assessment-db
    environment:
      - POSTGRES_DB=assessment_db
      - POSTGRES_USER=assessment
      - POSTGRES_PASSWORD=assessment_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - assessment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U assessment"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: cruise-assessment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - assessment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      target: production
    container_name: cruise-assessment-celery
    command: celery -A src.main.python.tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://assessment:assessment_pass@db:5432/assessment_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./output:/app/output
      - ./models:/app/models
    networks:
      - assessment-network
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: cruise-assessment-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - assessment-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  assessment-network:
    driver: bridge